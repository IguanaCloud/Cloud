pipeline {
    agent any
    environment {
        WORKING_DIR = "${WORKSPACE}/terraform/GCP/modules/helm_gogs"
        TF_VAR_username = credentials('helm_user')
        TF_VAR_password = credentials('helm_password')
        TF_VAR_mail = credentials('helm_mail')
        TF_VAR_registry_url = credentials('helm-url')
        TF_VAR_helm_repo = credentials('helm-chart-repo')
        TF_VAR_helm_chart = credentials('helm-chart-name')
        TF_VAR_registry_domain = credentials('helm-domain')
    }
    stages {
        stage('Select Credentials') {
            steps {
                script {
                    env.CREDENTIALS_ID = input(id: 'userInput', message: 'Select credentials to use', parameters: [
                        choice(name: 'CREDENTIALS_ID', choices: ['GOOGLE_CREDENTIALS_ID_dev', 'GOOGLE_CREDENTIALS_ID_stage', 'GOOGLE_CREDENTIALS_ID_prod'], description: 'Select Google Credentials ID')
                    ])

                    if (env.CREDENTIALS_ID == 'GOOGLE_CREDENTIALS_ID_dev') {
                        env.BRANCH_NAME = 'dev'
                    } else if (env.CREDENTIALS_ID == 'GOOGLE_CREDENTIALS_ID_stage') {
                        env.BRANCH_NAME = 'stage'
                    } else if (env.CREDENTIALS_ID == 'GOOGLE_CREDENTIALS_ID_prod') {
                        env.BRANCH_NAME = 'prod'
                    }
                    echo "Using branch: ${env.BRANCH_NAME} with credentials: ${env.CREDENTIALS_ID}"
                }
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning branch: ${env.BRANCH_NAME}"
                    git branch: env.BRANCH_NAME, url: "https://github.com/IguanaCloud/Cloud"
                }
            }
        }
        stage('Fetch Clusters') {
            steps {
                script {
                    withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        echo "Fetching clusters for ${env.BRANCH_NAME} environment"
                        sh "gcloud container clusters get-credentials ${env.BRANCH_NAME}-01-${env.BRANCH_NAME}1-gcp-gogs-kubernetes --zone us-${env.BRANCH_NAME}1-b --project iguana-${env.BRANCH_NAME}-env"
                    }
                }
            }
        }
        stage('Terraform format') {
            steps {
                echo 'Terraform format'
                dir("${WORKING_DIR}") {
                    sh 'terraform fmt'
                }
            }
        }
        stage('Terraform init') {
            steps {
                echo 'Terraform init'
                withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir("${WORKING_DIR}") {
                        sh 'make init'
                    }
                }
            }
        }
        stage('Terraform validate') {
            steps {
                echo 'Terraform validate'
                withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir("${WORKING_DIR}") {
                        sh 'terraform validate'
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                echo 'Terraform plan'
                withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir("${WORKING_DIR}") {
                        sh 'make plan'
                    }
                }
            }
        }
        stage('Terraform Apply or Destroy') {
            input {
                message 'Choose action for Terraform:'
                ok 'Submit'
                parameters {
                    choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Do you want to apply or destroy infrastructure?')
                }
            }
            steps {
                script {
                    if (env.ACTION == 'apply') {
                        echo 'Applying Terraform configuration'
                        withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            dir("${WORKING_DIR}") {
                                sh 'make apply'
                            }
                        }
                    } else if (env.ACTION == 'destroy') {
                        echo 'Destroying Terraform configuration'
                        withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            dir("${WORKING_DIR}") {
                                sh 'make destroy'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
